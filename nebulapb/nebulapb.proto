syntax = "proto3";
package nebulapb;

option java_package = "net.synchthia.api.nebula";
option java_outer_classname = "NebulaProtos";

message Empty {}

service Nebula {
    //-
    // MISC
    //-
    rpc Ping(Empty) returns (Empty) {}

    //-
    // STREAM
    //-
    // API -> Bungee (Notify Server Status)
    rpc EntryStream(StreamRequest) returns (stream EntryStreamResponse) {}
    rpc QuitEntryStream(QuitEntryStreamRequest) returns (Empty) {}

    // Currently Only API <-> Spigot (Server Status)
    //rpc StatusStream(StreamRequest) returns (stream StatusStreamResponse) {}
    //rpc QuitStatusStream(QuitStatusStreamRequest) returns (Empty) {}

    // wip
    //rpc SpigotStream(SpigotStreamRequest) returns (stream SpigotStreamResponse) {}
    //rpc QuitSpigotStream(QuitSpigotStreamRequest) returns (Empty) {}

    //-
    // ServerEntry
    //-
    // API -> Bungee (ServerEntry)
    rpc GetServerEntry(GetServerEntryRequest) returns (GetServerEntryResponse) {}

    // API <- App
    rpc AddServerEntry(AddServerEntryRequest) returns (AddServerEntryResponse) {}

    // API <- App
    rpc RemoveServerEntry(RemoveServerEntryRequest) returns (RemoveServerEntryResponse) {}
    
    //-
    // ServerStatus
    //-
    // Bungee -> API (Server Status)
    //rpc PushStatus(PushStatusRequest) returns (PushStatusResponse) {}

    // Spigot <- API (Server Status)
    //rpc FetchStatus(FetchStatusRequest) returns (FetchStatusResponse) {}
}

//
// BungeeSTREAM
//
//enum BungeeStreamType { QUIT = 0; CONNECT = 1; RESTORED = 2; DISPATCH = 3; SYNC = 4; }
//message StreamRequest { string name = 1; BungeeStreamType type = 2; }
//message EntryStreamResponse { BungeeStreamType type = 1; string target = 2; }

enum StreamType { QUIT = 0; CONNECT = 1; RESTORED = 2; DISPATCH = 3; SYNC = 4; REMOVE = 5; }
message StreamRequest { string name = 1; StreamType type = 2; }
message EntryStreamResponse { StreamType type = 1; string target = 2; ServerEntry entry = 3; }

message QuitEntryStreamRequest { string name = 1; }

//--
// Server Entry
//--
message ServerEntry {
    string name = 1;
    string displayName = 2;
    string address = 3;
    int32 port = 4;
    string motd = 5;
    ServerStatus status = 6;
}

message ServerStatus {
    bool online = 1;
    Version version = 2;
    message Version {
        string name = 1;
        int32 protocol = 2;
    }

    Players players = 3;
    message Players {
        int32 max = 1;
        int32 online = 2;
        // should be have sample?
    }

    // i don't have any idea... (need map)
    string description = 4;
    string favicon = 5;
}

//
// ServerEntry
//
message GetServerEntryRequest {}
message GetServerEntryResponse { repeated ServerEntry entry = 1; }

message AddServerEntryRequest { ServerEntry entry = 1; }
message AddServerEntryResponse {}

message RemoveServerEntryRequest { string name = 1; }
message RemoveServerEntryResponse {}

//
// ServerStatus
//

// PushStatus
//message PushStatusRequest {
//    string name = 1;
//    ServerStatus status = 2;
//}
//message PushStatusResponse {}

// FetchStatus
//message FetchStatusRequest {}
//message FetchStatusResponse { repeated ServerEntry entry = 1; }

//message StatusStreamRequest { }