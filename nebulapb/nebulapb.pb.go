// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nebulapb.proto

/*
Package nebulapb is a generated protocol buffer package.

It is generated from these files:
	nebulapb.proto

It has these top-level messages:
	ServerEntryStream
	ServerEntry
	ServerStatus
	GetServerEntryRequest
	GetServerEntryResponse
	AddServerEntryRequest
	AddServerEntryResponse
	RemoveServerEntryRequest
	RemoveServerEntryResponse
*/
package nebulapb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ServerEntryStream_Type int32

const (
	ServerEntryStream_SYNC   ServerEntryStream_Type = 0
	ServerEntryStream_REMOVE ServerEntryStream_Type = 1
)

var ServerEntryStream_Type_name = map[int32]string{
	0: "SYNC",
	1: "REMOVE",
}
var ServerEntryStream_Type_value = map[string]int32{
	"SYNC":   0,
	"REMOVE": 1,
}

func (x ServerEntryStream_Type) String() string {
	return proto.EnumName(ServerEntryStream_Type_name, int32(x))
}
func (ServerEntryStream_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

// ServerEntryStream (type: sync, remove)
type ServerEntryStream struct {
	Type  ServerEntryStream_Type `protobuf:"varint,1,opt,name=type,enum=nebulapb.ServerEntryStream_Type" json:"type,omitempty"`
	Entry *ServerEntry           `protobuf:"bytes,2,opt,name=entry" json:"entry,omitempty"`
}

func (m *ServerEntryStream) Reset()                    { *m = ServerEntryStream{} }
func (m *ServerEntryStream) String() string            { return proto.CompactTextString(m) }
func (*ServerEntryStream) ProtoMessage()               {}
func (*ServerEntryStream) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerEntryStream) GetType() ServerEntryStream_Type {
	if m != nil {
		return m.Type
	}
	return ServerEntryStream_SYNC
}

func (m *ServerEntryStream) GetEntry() *ServerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type ServerEntry struct {
	Name        string        `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	DisplayName string        `protobuf:"bytes,2,opt,name=displayName" json:"displayName,omitempty"`
	Address     string        `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	Port        int32         `protobuf:"varint,4,opt,name=port" json:"port,omitempty"`
	Motd        string        `protobuf:"bytes,5,opt,name=motd" json:"motd,omitempty"`
	Status      *ServerStatus `protobuf:"bytes,6,opt,name=status" json:"status,omitempty"`
}

func (m *ServerEntry) Reset()                    { *m = ServerEntry{} }
func (m *ServerEntry) String() string            { return proto.CompactTextString(m) }
func (*ServerEntry) ProtoMessage()               {}
func (*ServerEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ServerEntry) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerEntry) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *ServerEntry) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *ServerEntry) GetPort() int32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *ServerEntry) GetMotd() string {
	if m != nil {
		return m.Motd
	}
	return ""
}

func (m *ServerEntry) GetStatus() *ServerStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

type ServerStatus struct {
	Online  bool                  `protobuf:"varint,1,opt,name=online" json:"online,omitempty"`
	Version *ServerStatus_Version `protobuf:"bytes,2,opt,name=version" json:"version,omitempty"`
	Players *ServerStatus_Players `protobuf:"bytes,3,opt,name=players" json:"players,omitempty"`
	// i don't have any idea... (need map)
	Description string `protobuf:"bytes,4,opt,name=description" json:"description,omitempty"`
	Favicon     string `protobuf:"bytes,5,opt,name=favicon" json:"favicon,omitempty"`
}

func (m *ServerStatus) Reset()                    { *m = ServerStatus{} }
func (m *ServerStatus) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus) ProtoMessage()               {}
func (*ServerStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServerStatus) GetOnline() bool {
	if m != nil {
		return m.Online
	}
	return false
}

func (m *ServerStatus) GetVersion() *ServerStatus_Version {
	if m != nil {
		return m.Version
	}
	return nil
}

func (m *ServerStatus) GetPlayers() *ServerStatus_Players {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *ServerStatus) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ServerStatus) GetFavicon() string {
	if m != nil {
		return m.Favicon
	}
	return ""
}

type ServerStatus_Version struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Protocol int32  `protobuf:"varint,2,opt,name=protocol" json:"protocol,omitempty"`
}

func (m *ServerStatus_Version) Reset()                    { *m = ServerStatus_Version{} }
func (m *ServerStatus_Version) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus_Version) ProtoMessage()               {}
func (*ServerStatus_Version) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

func (m *ServerStatus_Version) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServerStatus_Version) GetProtocol() int32 {
	if m != nil {
		return m.Protocol
	}
	return 0
}

type ServerStatus_Players struct {
	Max    int32 `protobuf:"varint,1,opt,name=max" json:"max,omitempty"`
	Online int32 `protobuf:"varint,2,opt,name=online" json:"online,omitempty"`
}

func (m *ServerStatus_Players) Reset()                    { *m = ServerStatus_Players{} }
func (m *ServerStatus_Players) String() string            { return proto.CompactTextString(m) }
func (*ServerStatus_Players) ProtoMessage()               {}
func (*ServerStatus_Players) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *ServerStatus_Players) GetMax() int32 {
	if m != nil {
		return m.Max
	}
	return 0
}

func (m *ServerStatus_Players) GetOnline() int32 {
	if m != nil {
		return m.Online
	}
	return 0
}

//
// ServerEntry
//
type GetServerEntryRequest struct {
}

func (m *GetServerEntryRequest) Reset()                    { *m = GetServerEntryRequest{} }
func (m *GetServerEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*GetServerEntryRequest) ProtoMessage()               {}
func (*GetServerEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type GetServerEntryResponse struct {
	Entry []*ServerEntry `protobuf:"bytes,1,rep,name=entry" json:"entry,omitempty"`
}

func (m *GetServerEntryResponse) Reset()                    { *m = GetServerEntryResponse{} }
func (m *GetServerEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*GetServerEntryResponse) ProtoMessage()               {}
func (*GetServerEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetServerEntryResponse) GetEntry() []*ServerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AddServerEntryRequest struct {
	Entry *ServerEntry `protobuf:"bytes,1,opt,name=entry" json:"entry,omitempty"`
}

func (m *AddServerEntryRequest) Reset()                    { *m = AddServerEntryRequest{} }
func (m *AddServerEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*AddServerEntryRequest) ProtoMessage()               {}
func (*AddServerEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AddServerEntryRequest) GetEntry() *ServerEntry {
	if m != nil {
		return m.Entry
	}
	return nil
}

type AddServerEntryResponse struct {
}

func (m *AddServerEntryResponse) Reset()                    { *m = AddServerEntryResponse{} }
func (m *AddServerEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*AddServerEntryResponse) ProtoMessage()               {}
func (*AddServerEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type RemoveServerEntryRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RemoveServerEntryRequest) Reset()                    { *m = RemoveServerEntryRequest{} }
func (m *RemoveServerEntryRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveServerEntryRequest) ProtoMessage()               {}
func (*RemoveServerEntryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *RemoveServerEntryRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RemoveServerEntryResponse struct {
}

func (m *RemoveServerEntryResponse) Reset()                    { *m = RemoveServerEntryResponse{} }
func (m *RemoveServerEntryResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveServerEntryResponse) ProtoMessage()               {}
func (*RemoveServerEntryResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func init() {
	proto.RegisterType((*ServerEntryStream)(nil), "nebulapb.ServerEntryStream")
	proto.RegisterType((*ServerEntry)(nil), "nebulapb.ServerEntry")
	proto.RegisterType((*ServerStatus)(nil), "nebulapb.ServerStatus")
	proto.RegisterType((*ServerStatus_Version)(nil), "nebulapb.ServerStatus.Version")
	proto.RegisterType((*ServerStatus_Players)(nil), "nebulapb.ServerStatus.Players")
	proto.RegisterType((*GetServerEntryRequest)(nil), "nebulapb.GetServerEntryRequest")
	proto.RegisterType((*GetServerEntryResponse)(nil), "nebulapb.GetServerEntryResponse")
	proto.RegisterType((*AddServerEntryRequest)(nil), "nebulapb.AddServerEntryRequest")
	proto.RegisterType((*AddServerEntryResponse)(nil), "nebulapb.AddServerEntryResponse")
	proto.RegisterType((*RemoveServerEntryRequest)(nil), "nebulapb.RemoveServerEntryRequest")
	proto.RegisterType((*RemoveServerEntryResponse)(nil), "nebulapb.RemoveServerEntryResponse")
	proto.RegisterEnum("nebulapb.ServerEntryStream_Type", ServerEntryStream_Type_name, ServerEntryStream_Type_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Nebula service

type NebulaClient interface {
	// API -> Bungee (ServerEntry)
	GetServerEntry(ctx context.Context, in *GetServerEntryRequest, opts ...grpc.CallOption) (*GetServerEntryResponse, error)
	// API <- App
	AddServerEntry(ctx context.Context, in *AddServerEntryRequest, opts ...grpc.CallOption) (*AddServerEntryResponse, error)
	// API <- App
	RemoveServerEntry(ctx context.Context, in *RemoveServerEntryRequest, opts ...grpc.CallOption) (*RemoveServerEntryResponse, error)
}

type nebulaClient struct {
	cc *grpc.ClientConn
}

func NewNebulaClient(cc *grpc.ClientConn) NebulaClient {
	return &nebulaClient{cc}
}

func (c *nebulaClient) GetServerEntry(ctx context.Context, in *GetServerEntryRequest, opts ...grpc.CallOption) (*GetServerEntryResponse, error) {
	out := new(GetServerEntryResponse)
	err := grpc.Invoke(ctx, "/nebulapb.Nebula/GetServerEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebulaClient) AddServerEntry(ctx context.Context, in *AddServerEntryRequest, opts ...grpc.CallOption) (*AddServerEntryResponse, error) {
	out := new(AddServerEntryResponse)
	err := grpc.Invoke(ctx, "/nebulapb.Nebula/AddServerEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nebulaClient) RemoveServerEntry(ctx context.Context, in *RemoveServerEntryRequest, opts ...grpc.CallOption) (*RemoveServerEntryResponse, error) {
	out := new(RemoveServerEntryResponse)
	err := grpc.Invoke(ctx, "/nebulapb.Nebula/RemoveServerEntry", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Nebula service

type NebulaServer interface {
	// API -> Bungee (ServerEntry)
	GetServerEntry(context.Context, *GetServerEntryRequest) (*GetServerEntryResponse, error)
	// API <- App
	AddServerEntry(context.Context, *AddServerEntryRequest) (*AddServerEntryResponse, error)
	// API <- App
	RemoveServerEntry(context.Context, *RemoveServerEntryRequest) (*RemoveServerEntryResponse, error)
}

func RegisterNebulaServer(s *grpc.Server, srv NebulaServer) {
	s.RegisterService(&_Nebula_serviceDesc, srv)
}

func _Nebula_GetServerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebulaServer).GetServerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nebulapb.Nebula/GetServerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebulaServer).GetServerEntry(ctx, req.(*GetServerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nebula_AddServerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddServerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebulaServer).AddServerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nebulapb.Nebula/AddServerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebulaServer).AddServerEntry(ctx, req.(*AddServerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Nebula_RemoveServerEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveServerEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NebulaServer).RemoveServerEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nebulapb.Nebula/RemoveServerEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NebulaServer).RemoveServerEntry(ctx, req.(*RemoveServerEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Nebula_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nebulapb.Nebula",
	HandlerType: (*NebulaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServerEntry",
			Handler:    _Nebula_GetServerEntry_Handler,
		},
		{
			MethodName: "AddServerEntry",
			Handler:    _Nebula_AddServerEntry_Handler,
		},
		{
			MethodName: "RemoveServerEntry",
			Handler:    _Nebula_RemoveServerEntry_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nebulapb.proto",
}

func init() { proto.RegisterFile("nebulapb.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 524 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x52, 0x5d, 0x8f, 0xd2, 0x40,
	0x14, 0xa5, 0x50, 0x0a, 0x5e, 0x36, 0x84, 0x9d, 0x04, 0xac, 0x68, 0xb4, 0xa9, 0x2f, 0x24, 0x26,
	0x7d, 0x60, 0x7d, 0xd0, 0x47, 0x57, 0x89, 0x4f, 0xe2, 0x66, 0xd0, 0x4d, 0x7c, 0x31, 0x19, 0xe8,
	0x98, 0x6d, 0x02, 0x33, 0x75, 0x66, 0x20, 0xf6, 0x7f, 0x18, 0xff, 0x89, 0x7f, 0xc1, 0xdf, 0x65,
	0xe6, 0xa3, 0x4b, 0x17, 0xca, 0xee, 0xdb, 0xbd, 0xbd, 0xe7, 0x9c, 0xb9, 0xe7, 0xf4, 0x42, 0x9f,
	0xd1, 0xe5, 0x76, 0x4d, 0xf2, 0x65, 0x92, 0x0b, 0xae, 0x38, 0xea, 0x96, 0x7d, 0xfc, 0xdb, 0x83,
	0xf3, 0x05, 0x15, 0x3b, 0x2a, 0x66, 0x4c, 0x89, 0x62, 0xa1, 0x04, 0x25, 0x1b, 0xf4, 0x1a, 0x7c,
	0x55, 0xe4, 0x34, 0xf4, 0x22, 0x6f, 0xd2, 0x9f, 0x46, 0xc9, 0x2d, 0xfd, 0x08, 0x9a, 0x7c, 0x29,
	0x72, 0x8a, 0x0d, 0x1a, 0xbd, 0x82, 0x36, 0xd5, 0x93, 0xb0, 0x19, 0x79, 0x93, 0xde, 0x74, 0x58,
	0x4b, 0xc3, 0x16, 0x13, 0x3f, 0x03, 0x5f, 0x53, 0x51, 0x17, 0xfc, 0xc5, 0xb7, 0xf9, 0xfb, 0x41,
	0x03, 0x01, 0x04, 0x78, 0xf6, 0xe9, 0xf3, 0xf5, 0x6c, 0xe0, 0xc5, 0x7f, 0x3d, 0xe8, 0x55, 0x48,
	0x08, 0x81, 0xcf, 0xc8, 0xc6, 0x2e, 0xf4, 0x08, 0x9b, 0x1a, 0x45, 0xd0, 0x4b, 0x33, 0x99, 0xaf,
	0x49, 0x31, 0xd7, 0xa3, 0xa6, 0x19, 0x55, 0x3f, 0xa1, 0x10, 0x3a, 0x24, 0x4d, 0x05, 0x95, 0x32,
	0x6c, 0x99, 0x69, 0xd9, 0x6a, 0xbd, 0x9c, 0x0b, 0x15, 0xfa, 0x91, 0x37, 0x69, 0x63, 0x53, 0xeb,
	0x6f, 0x1b, 0xae, 0xd2, 0xb0, 0x6d, 0xdf, 0xd0, 0x35, 0x4a, 0x20, 0x90, 0x8a, 0xa8, 0xad, 0x0c,
	0x03, 0xe3, 0x69, 0x74, 0xe8, 0x69, 0x61, 0xa6, 0xd8, 0xa1, 0xe2, 0x7f, 0x4d, 0x38, 0xab, 0x0e,
	0xd0, 0x08, 0x02, 0xce, 0xd6, 0x19, 0xb3, 0xab, 0x77, 0xb1, 0xeb, 0xd0, 0x1b, 0xe8, 0xec, 0xa8,
	0x90, 0x19, 0x67, 0x2e, 0xad, 0xe7, 0xf5, 0xca, 0xc9, 0xb5, 0x45, 0xe1, 0x12, 0xae, 0x99, 0xda,
	0x20, 0x15, 0xd6, 0xd4, 0x69, 0xe6, 0x95, 0x45, 0xe1, 0x12, 0x6e, 0x02, 0xa3, 0x72, 0x25, 0xb2,
	0x5c, 0xe9, 0x77, 0x7d, 0x17, 0xd8, 0xfe, 0x93, 0x0e, 0xec, 0x07, 0xd9, 0x65, 0x2b, 0xce, 0x5c,
	0x0a, 0x65, 0x3b, 0x7e, 0x0b, 0x1d, 0xb7, 0x49, 0xed, 0xbf, 0x18, 0x43, 0xd7, 0x5c, 0xd6, 0x8a,
	0xaf, 0x8d, 0x9f, 0x36, 0xbe, 0xed, 0xc7, 0x17, 0xd0, 0x71, 0xab, 0xa0, 0x01, 0xb4, 0x36, 0xe4,
	0x97, 0x61, 0xb6, 0xb1, 0x2e, 0x2b, 0xf9, 0x58, 0x9a, 0xeb, 0xe2, 0xc7, 0x30, 0xfc, 0x48, 0x55,
	0xf5, 0x6e, 0xe8, 0xcf, 0x2d, 0x95, 0x2a, 0x9e, 0xc1, 0xe8, 0x70, 0x20, 0x73, 0xce, 0x64, 0xe5,
	0xfc, 0xbc, 0xa8, 0xf5, 0xe0, 0xf9, 0x7d, 0x80, 0xe1, 0xbb, 0x34, 0x3d, 0xd6, 0xaf, 0xaa, 0x3c,
	0x7c, 0xc4, 0x21, 0x8c, 0x0e, 0x55, 0xec, 0x32, 0x71, 0x02, 0x21, 0xa6, 0x1b, 0xbe, 0xa3, 0x35,
	0x4f, 0xd4, 0x04, 0x18, 0x3f, 0x85, 0x27, 0x35, 0x78, 0x2b, 0x36, 0xfd, 0xd3, 0x84, 0x60, 0x6e,
	0xd6, 0x40, 0x5f, 0xa1, 0x7f, 0xd7, 0x3e, 0x7a, 0xb1, 0xdf, 0xb0, 0x36, 0xb1, 0x71, 0x74, 0x1a,
	0xe0, 0x96, 0x6d, 0x68, 0xd9, 0xbb, 0x46, 0xaa, 0xb2, 0xb5, 0x41, 0x55, 0x65, 0x4f, 0x64, 0xd0,
	0x40, 0xdf, 0xe1, 0xfc, 0xc8, 0x15, 0x8a, 0xf7, 0xc4, 0x53, 0x11, 0x8d, 0x5f, 0xde, 0x8b, 0x29,
	0xf5, 0x2f, 0x27, 0x10, 0x32, 0xaa, 0x12, 0x59, 0xb0, 0xd5, 0x8d, 0xba, 0xc9, 0x48, 0x42, 0xf2,
	0xcc, 0x31, 0x2f, 0xcf, 0x6c, 0x62, 0x57, 0xfa, 0x0c, 0xe5, 0x32, 0x30, 0xe7, 0x78, 0xf1, 0x3f,
	0x00, 0x00, 0xff, 0xff, 0xd0, 0xf8, 0x78, 0x33, 0x0a, 0x05, 0x00, 0x00,
}
